1 Introduction The Model-Driven Architecture (MDA) provides a foundational framework for the design and development of enterprise information systems, emphasizing a top-down design approach with three levels of model abstraction: the Compu- tational Independent Model (CIM) for capturing business goals, the Platform Independent Model (PIM) for representing system functionality independent of specific technologies, and the Platform Specific Model (PSM) for detailing the technological choices made [13]. This structured approach allows for deferred technological decisions, assuming that such choices primarily have localized im- pacts. However, the MDA approach often overlooks the integration of softgoals due to their subjective and qualitative nature. Softgoals, unlike hardgoals, lack clear- cut achievement criteria and encompass aspects such as cost, security, response 2 E. Kiomba et al. time, and performance. These qualitative attributes are crucial for successful software production as they influence user satisfaction, feature prioritization, and development trade-offs. Motivated by the need to better incorporate qualitative attributes and ana- lyzing technological impacts into enterprise modeling, we previously introduced Technology Aware for Enterprise Modeling (TEAEM)[17] which extends MDA by integrating model checking, validation and impact analysis of technological choices before product generation. This approach enables the unification of CIM- PIM within a “Unified Model”, allowing the identification and resolution of incon- sistencies across different MDA levels. If inconsistencies are detected, TEAEM reports constraint violations to the business user and assists in decision-making. TEAEM had some limitations. Firstly, it focused on the unification of CIM and PIM without extending support to the PSM. Additionally, the approach was centered on the use of hardgoals, with little attention given to softgoals. This paper aims extends TEAEM with two major contributions: First, we integrate the MDA low-level PSM using SysML component modeling, achiev- ing a unified CIM-PIM-PSM model that enables bottom-up constraint propa- gation and analysis. This integration ensures that technological choices made at the PSM level are consistently reflected across all abstraction levels, enhancing the overall coherence and bottom-up traceability within the enterprise modeling process. Second, we extend TEAEM by integrating softgoals into the CIM. By including softgoals in the early stages of modeling, we can better address qual- itative attributes throughout the system development life-cycle. This approach allows for the generation of code (configuration) guided by the satisfaction of these softgoals, thereby optimizing the system for user satisfaction and strategic business goals. The remainder of this paper is organized as follows: Section 2 provides a brief overview of key concepts such as MDA, Software Product Lines, and Softgoals. Section 3 details the TEAEM approach and its extension to integrate softgoals. Section 4 discusses the implementation, mapping details, and an illustrative example used to validate our approach. Finally, Section 5 presents the discussion and conclusions of this work. 2 Background 2.1 MDA, Top-Down Design and Enterprise Architecture The architecture of a system constitutes what is essential about that system considered in relation to its environment[8]. There are different frameworks used in enterprise architecture and software engineering. Model Driven Architecture is a software design approach that provides a set of guidelines for structuring specifications, which are expressed as models. The core of MDA is its focus on three primary types of models; Computation Independent Model represents the system’s requirements and business context, without detailing the structure or processing. Platform Independent Model spec- ifies the system’s structure and functionality but abstracts away the details of Title Suppressed Due to Excessive Length 3 any specific platform. Platform Specific Model combines the specifications in the PIM with the details of how the system uses a particular type of platform. Many works exist in the literature that exploit the MDA concept to make goal alignment and traceability of goal. In [14], authors presents a strategy-to-code (S2C) methodological approach integrating organizational, business process, and information system modeling to support strategic alignment in software devel- opment. It emphasizes model-driven development and conceptual modeling for semi-automatic software generation and traceability across different modeling levels. By using a working example, it illustrates how strategic definitions can be transformed into specific software components through the integration of Lite*, Communication Analysis, and the OO-Method, demonstrating the feasi- bility of achieving strategic requirements, traceability, and automatic software generation. Recent Enterprise Architecture frameworks exist that give advice on the pro- cesses and practices of Enterprise Architecture, and one of these, that the Archi- Mate Specification is fully aligned with, is the TOGAF standard[8]. ArchiMate is focus on the the problem of aligning strategic business plans with the plans and goals for the development of Information Systems based on Information Technology (IS/IT). 2.2 Software Product Lines MDA and SPL are complementary approaches that greatly benefit from the integration of softgoals. Software Product Line Engineering (SPLE) serves as a methodological framework for developing software families, characterized by significant overlap in functional and non-functional attributes [3]. A primary focus of SPLE is to identify and codify the common features of a cluster of software-intensive applications within a specific domain [1]. An SPL is generally composed of three main types of artifacts: Problem Space: this describes the features and functionalities desired by users across all potential products in the family. Solution Space: This includes the design and implementation specifics for all components across different products within the SPL and The Mappings: These establish the connections between features in the problem space and their respective components in the solution space. In this work, we choose SPL like application domain of TEAEM. 2.3 Softgoals and Utility Functions for Evaluating Softgoals Softgoals serve as quality criteria that software systems or their components must meet during development. Softgoals are subjective, relative, diverse, and interactive, making them crucial yet challenging to model due to their qualitative nature [7]. The literature highlights the significance of softgoals in determining the suc- cess of software projects. For instance, consider the softgoals for a software sys- tem such as performance ("The system should respond quickly to user inputs") 4 E. Kiomba et al. and security ("The system should protect user data from unauthorized access"). These qualitative goals pose the question: how can we effectively evaluate them? Significant research has been conducted on identifying softgoals within In- formation Systems (IS). For example, one study presented a comprehensive list of 114 softgoals identified in information systems [12], while another proposed a taxonomy categorizing these softgoals into four groups: Real and Web-based Systems, Web-based Systems, Real-time Systems, and Information Systems [5]. We aim to adapt some of these identified softgoals and quantify them. To quantify softgoals, we propose writing a utility function for each softgoal, facilitating the evaluation of how well a system meets these goals. Softgoals like usability, reliability, and performance are inherently qualitative. By converting these into quantifiable metrics through a utility function, we enable more objec- tive assessments and comparisons. The following section will introduce our extended approach and explain how to generate configurations that meet these softgoals. 3 TEAEM Approach guiding configuration by softgoals TEAEM is a holistic approach that extends the top-down MDA design paradigm with bottom-up traceability and constraint propagation analysis. 3.1 TEAEM Extension We propose extending TEAEM with the following contributions: (1) Integration of PSM to illustrate technological choices using component modeling (SysML). (2) Integration of softgoals to guide business users in generating configurations within the SPL. Model Design Constraints Analysis (top down) (bottom-up) Fig. 1: TEAEM approach to meet Softgoals. Hashed blocks show TEAEM ex- tension proposed in this paper Title Suppressed Due to Excessive Length 5 Figure 1 illustrates the extension of the TEAEM approach. The model is subdivided into two parts: On the left hand side represents the top-down MDA design approach with three abstraction levels: CIM, PIM, and PSM. – CIM Layer: We start by creating the goal model using the i* framework[4] with the PiStar tool[15]. This model includes both hardgoals (functional requirements) and softgoals (non-functional requirements). – PIM Layer: We design the Feature Model using the FeatureIDE tool [10]. – PSM Layer: We create component models with SysML, which include tech- nical metadata about alternative implementations of the designed solution. On the right-hand side, we extend TEAEM by unifying the PIM, CIM, and PSM layers of MDA into a single model called the “Unified Feature Model (UFM)”. This unification is crucial for several reasons: – Model checking and validation help validate the UFM to confirm it meets requirements, identify inconsistencies in the specification, and show conflicts between elements of the unified feature models. – Impact Analysis: Helps identify how changes in one part of the model affect others by reporting constraint violations from low-level to high-level. – Configuration Generation in SPL: Facilitates the generation of configurations that satisfy softgoals. To achieve this unification, we define the following mapping: – Goal to Feature Mapping (TEAEM): This mapping associates business goals with the technical features that fulfill those goals. It reflects the technical assumptions made by system engineers. – Feature to Goal Mapping (TEAEM): This mapping associates technical fea- tures with the goals that could potentially be compromised or hindered by their implementation. – Feature to Component Mapping (this paper): This new mapping associates features with the specific technological components that implement them. The mappings are formalized using a symbolic mathematics library to struc- ture the logical expressions. This library also develops utility functions to opti- mize the softgoals. Further details are provided in section 4. After unifying the model, we use model-checking with a boolean solver to validate the UFM and identify inconsistencies causing conflicts between goals, features, and components. If model checking returns false, indicating no feasible configuration, we pro- vide a domain-specific interpretation of these conflicts and recommend solutions. If model checking returns true, indicating multiple feasible configurations, we in- tegrate softgoals into the decision-making process. We use a utility function to quantify each softgoal and apply a Multiple-Criteria Decision Making (MCDM) algorithm to optimize softgoal satisfaction, determining the best configuration for the business user. 6 E. Kiomba et al. The main distinction between TEAEM and other frameworks like MDA or ArchiMate is its integration and analysis of inconsistencies across different ab- stract level (goal, feature, component) within the MDA. While ArchiMate offers a holistic view of enterprise architectures, it does not specifically focus on de- tecting and managing inconsistencies between different model types or guiding product generation by softgoals. 3.2 Modeling Softgoals with the Utility Function As mentioned in section 2.3, we reuse some of the softgoals defined by [12]. In this context, Key Performance Indicators (KPIs) are commonly used to measure the performance of various aspects of a system. However, we use a utility function instead of KPIs because the utility function allows for a more comprehensive and integrative approach. While KPIs provide valuable insights into specific performance metrics, they often fail to account for the trade-offs be- tween conflicting goals. The utility function, on the other hand, can encapsulate multiple softgoals into a single measure, allowing for the optimization of overall user satisfaction and system performance in a balanced manner. The utility function quantifies values derived from component modeling (value of each component) and serves as input for the MCDM algorithm to generate configurations that maximize user satisfaction. We focus on the following soft- goals for the implementation and test phases in sections 4 and 5. Table 1: Description of Softgoals with Blockchain Components Softgoals Description Refined-into Notation Cost System Operates with minimal C should be expenses and reduces the cost-efficient. overall cost of ownership. Response_Time System Processes requests quickly R should be and efficiently, providing fast. timely feedback to users. Throughput System Processes incoming data T should have quickly and sends new data high without delay. throughput. The overall goal is to minimize the total cost of the components, which is the C (x ) i. C sum of individual cost functions for each component is the total cost, i i x R and are the decision variables adjusted to optimize the cost. is the total i R (x ) i, T response time, is the response time function for each component and i i min T is the total throughput that we aim to minimize, , the throughput 0 i n i   i. function for each component We define this objective function by integrating the different softgoals to optimize: Title Suppressed Due to Excessive Length 7 F = w C + w R w T Min 1 2 3   F C R Where is the combined objective function, is the total cost, is the T w , w , w total response time, and is the total throughput. are the weights 1 2 3 assigned to cost, response time, and throughput, respectively, reflecting their relative importance for the business users. The next section presents the different modules we developed. 4 Implementation We implemented TEAEM, an automated process for model unification across different MDA abstraction levels, detecting constraint violations, performing impact analysis, and generating software product line configurations driven by softgoals. modules1: We developed the following 1. Generation of the Unified Feature Model (UFM): The unified model includes the goal model, feature model, component models, and constraints. For top- down model design, we use the i* modeling language [4] and the PiStar tool for Goal Modeling, FeatureIDE for feature modeling, and SysML for component models. Mapping for CIM-PIM-PSM is achieved using SymPy with logical expressions. This module automates the generation of the unified feature model. 2. Extraction of Constraints from the UFM : This module performs model check- ing/validation. We use FeatureIDE and its bundled Sat4j solver [11] to re- trieve constraints from the UFM, generating an output in JSON for con- straint analysis when inconsistencies arise between the three MDA levels. 3. Interpretation of Constraint Violations and Their Implications: We devel- oped a module that takes the outcomes.json list of constraint violations from FeatureIDE and produces domain-specific interpretations of these violations to guide business users in their decision-making. 4. Generation of Configurations that Meet Softgoals: This module calculates utility functions using SymPy, based on parameter values from SysML com- ponent models. The utility function’s Min/Max values help identify the best configuration that matches the specified requirements. 5. Optimization Using the Topsis Algorithm: We implement the Topsis algo- rithm for Multiple-Criteria Decision Making, ensuring the optimization and evaluation of our Unified Model to achieve highly optimized solutions. We make three types of mapping as specified on the section3.1. For The mapping of Goal to Feature and Feature to goal, We use the mathematical logical expressions rules that we passed with Sympy in order to execute automatically the logic. 1 https://github.com/Eddykams/TEAEM_develop 8 E. Kiomba et al. For the mapping PIM-PSM, We have two cases: (1) Mapping One Feature - One Component: The following bijection function modeling the mapping between PIM-PSM : H = F = C (A) 1 ) with, F: Features and C: Components. (2) Mapping One Feature With Multiple Components: We use TOPSIS (Tech- nique for Order of Preference by Similarity to Ideal Solution) is a multi-criteria decision analysis method that ranks alternatives based on their distance to an ideal solution and a negative-ideal solution. It helps in selecting the best option by comparing the relative closeness of each alternative to the ideal solution. In the next section, we present an illustrative example where we apply TEAEM to configure products to meet soft goals. 5 Illustrative Example: Counterfeiting Drugs in Supply Chain 5.1 Motivation The market of counterfeit drugs has become a 200-billion-dollar business annu- ally, according to the World Health Organization (WHO). According to a WHO report, up to 10% of all sold drugs globally are fake, with significantly higher rates in parts of Africa and Asia. This business is very dangerous because of life- and-death implications for patients (thousands of deaths every year) and also for the pharmaceutical industry’s reputation, which can lose a lot of money. The complexity of pharmaceutical supply chain operations is the primary reason for this issue. With a large number of handovers to different supply chain partners before drugs reach hospitals and pharmacies, there is a significant lack of trace- ability. Manufacturing is vulnerable to counterfeit raw materials or ingredients from unknown sources. Moreover, illicit producers can relabel fake products to infiltrate legitimate distribution channels. For the pharmaceutical sector, the European Union (EU) and the Drug Supply Chain Security Act (DSCSA) in the United States provide a deadline of 2023 for the industry to implement a traceability system. Based on the work [9][6], we present the following illustrative example. Com- pany X, based in Europe and Africa, must enter the pharmaceutical market in compliance with EU regulations and operate in Africa. The organization has many branches in different countries that require a system to manage trans- actions recorded across multiple locations. Additionally, there is a need for a system that enhances trust among various stakeholders. The system must address the following needs: Reduce drug counterfeiting (fraud detection) by ensuring traceability and transparency at every step of the product transfer. Ensure secure data management by enhancing privacy through access controls and encryption, and by maintaining the integrity and immutabil- ity of data. Manage recalls of defective products; conditions of transporting drugs Title Suppressed Due to Excessive Length 9 must be verified through real-time audits using IoT, sensors, or RFID tags. The authenticity of products must be checked by log-audit. 5.2 TEAEM for configuration in SPL to meet softgoals The main goal of Enterprise X is to determine if, with their goals, features, and components, they can generate a product or if there are any inconsistencies between them before generating the product. The organization proposes to inte- grate the following softgoals: maximal performance, minimal cost for blockchain components, better response time, and minimal cost for the electronic solutions (RFIDs, IoT sensors, or NFC tags). Step1: We present a partial goal model of the enterprise, depicting different softgoals and the links between goals and softgoals in the Figure 2. Step 2: To build the feature model, we made a literature review to iden- tify different solutions proposed for combating drug counterfeiting in the sup- ply chain illustrated in 2. According to some findings in the literature, [2][16] assert, for example, that the ideal anti-counterfeit technology in an enterprise system should have a high level of safety, faster product application, established standards, simple to check, have automatic authentication, be accessible to con- sumers, and comply with industry regulations. Table 2: Requirements and Technologies Identified Goals - Requirements References Blockchain Cloud ML ￿ Transparent [16] - - ￿ ￿ Traceability [16][2][19] - ￿ ￿ ￿ Reliable [18][16][2][19] ￿ High Level of Safety [16] - - ￿ faster product application [18] - - ￿ Simple to audit [16] - - ￿ ￿ Automatic Process [18][16][2] - ￿ ￿ Compliant with industry Regulations [18][19] - ￿ Accountability [18] - - ￿ Trust [16] - - ￿ Decentralized [16][2] - - ￿ High Security [2] - - ￿ Flexibility [18] - - We built the feature model based on the technologies identified in 2. Three prominent technologies were proposed: blockchain technology, for its features such as traceability, trust, and immutability; Cloud Computing [18], known for its flexibility and faster application production; and Machine Learning, which can identify counterfeit drugs through algorithmic data analysis. Additionally, associated electronic equipment for traceability is proposed, such as RFID tags, IoT sensors (pressure, geolocation), and NFC tags. 10 E. Kiomba et al. Fig. 2: Goal Modeling of Enterprise X Fig. 3: Feature Model of Enterprise X Fig. 4: Component Model of Enterprise X Title Suppressed Due to Excessive Length 11 Step 3: Based on the analysis presented in Table 2, we decided to use blockchain technology as a component to illustrate our example. Blockchain is a novel technology that has not yet been widely adopted by enterprises due to the lack of standardization and scarcity of engineers skilled in its implementation. The literature identifies two principal types of blockchains: public blockchain and private blockchain. Using SysML, we illustrate the component model for blockchain technology and other technologies. However, for the evaluation phase, we focus on the value of the blockchain component. Step4: TEAEM - The unified model, as depicted in Fig.5, put within a sin- gle model the three abstract level of the MDA. In our study, the model checking results were positive, indicating that the unified model is valid. However, the next step involves generating configurations that satisfy the softgoals defined in the previous section. Fig. 5: Model Unification Step 5: After model unification, we use model checking/validation to de- termine if a valid configuration exists for this unified model or if there are any inconsistencies. The unified feature model generates 4 possible configurations, in- dicating that there are no inconsistencies or constraint violations. Therefore, refining the model is unnecessary. In [17], we presented an example where con- straint violations were detected. The question then arises: how do business users choose the "best" configuration that meets their softgoals? Step 6: As outlined in the previous section, to generate configurations guided by the satisfaction of softgoals, we detail the softgoals discussed in Section 3.2, including their associated utility functions and the blockchain components em- ployed. The values of component properties are inputted as parameters into the utility functions to select the optimal configuration. We use blockchain configu- rations and utilize the TOPSIS method for multi-objective optimization. 12 E. Kiomba et al. In the absence of a generalizable throughput/response time formula for all possible cases, we have chosen to formulate the following assumptions: Response Time is the minimal time for the detection of counterfeiting drugs and depends on the component properties: Transaction Processing Time, Block Creation Time, and Smart Contract Execution Time. The throughput is a function of block size, block execution time, and network bandwidth for the blockchain. Table 3: Utility functions and blockchain component properties of softgoals Softgoals Utility function Components properties Deployment cost, n C = (min C (D , M )) Blockchain Cost i c c i=1 Maintenance cost Block Size, P T = T (B , B , N ) Throughput Block Time, s t b Network Bandwidth. Tx Processing Time R = R(T x , B , SC ) Response Time Block Creation Time i c e SC Execution Time Deployment cost n EC = (min C (D , E , M )) Electronic_Cost Execution cost i c c c i=1 Maintenance cost P 5.3 Results After integrating the blockchain component values as parameters in the utility function to generate products, we made the following tests: (1)We help to choose configurations that meet one softgoal. For example, when the organization needs to minimize blockchain costs: Fig. 6: Configuration guiding by the Minimal Blockchain Cost To minimize blockchain costs, the implemented module maps the value of the component across different configurations, calculates the value using the utility function implemented by SymPy, and returns this value for comparison with Title Suppressed Due to Excessive Length 13 other configurations. The configuration with the lowest cost is considered the winner. For one component, it is easy to generate a product that matches this softgoal. (2) Help to choose configurations that meet multiple criteria: In this case, we have a multi-objective optimization. We need to choose the best configuration guided by multiple softgoal criteria. Table 4: Softgoals Criteria with Heigh Attributes Blockchain Cost Response_Time Throughput Electronic Cost Conf0 300 15 seconds/bloc 18 Tx/seconds 140 Conf1 350 15 seconds/bloc 16 Tx/seconds 120 Conf2 200 2 seconds/bloc 100Tx/seconds 200 Conf3 250 3 seconds/bloc 200Tx/seconds 180 For the test phase, it is important to clarify that the values presented in Table 4 are provided for illustrative purposes only and do not represent calculations from a utility function. Instead, these values are intended to demonstrate the application of MCDM with TOPSIS. The table 4 illustrates the four configurations found after the model check- ing/validation. Different values (Blockchain Cost, Response Time, Throughput, and Electronic Cost) were passed as inputs to our component model. In this case, we have a multi-objective optimization where we need to choose the best configuration guided by multiple softgoal criteria. Many optimization algorithms exist in the literature, and we implemented the TOPSIS method for Multiple- Criteria Decision Making. For the evaluation phase, for example, if we have input data illustrated in Table 4, we have the following outcomes: Scenario 1: We defined the same weight for all parameters [0.25,0.25,0.25,0.25] and identified Response Time, Blockchain Cost, and Electronic Cost as non- benefit parameters (functions to minimize) and Throughput as a benefit param- eter (function to maximize). We have the following outcomes: Table 5: Scenario 1 Outcomes Overview Attributes BC_Cost R_Time Throughput E_Cost S_POS S_NEG Score Rank Conf0 300 15 18 140 0.2215 0.0862 0.2801 3 Conf1 350 15 16 120 0.2349 0.0613 0.2069 4 Conf2 200 2 100 200 0.0689 0.2139 0.7561 2 Conf3 250 3 200 180 0.0532 0.2215 0.8061 1 To reduce the blockchain cost, the cost of the electronic equipment, and the re- sponse time, while increasing performance with throughput, the best configura- tion is Configuration 3 (Conf3), which achieves 80% satisfaction among business 14 E. Kiomba et al. users. The worst configuration is Configuration 1 (Conf1), with only 20% satis- faction among business users. This is clearly specified with different constraints and the values of blockchain components as parameters. The configuration that meets the specified softgoals is Configuration 3. Scenario 2: Business users place significant emphasis on Response_Time com- pared to other criteria. We adjust the weight according to preferences, for ex- ample, 0.6 for Response Time and 0.13 Blockchain Cost, 0.13 Throughput and 0.13 Electronic Cost.([0.13, 0.61, 0.13, 0.13]). Table 6: outcomes for Scenario 2 Attributes BC_Cost R_Time Throughput E_Cost S_POS S_NEG Score Rank Conf0 300 15 18 140 0.3682 0.0344 0.0856 3 Conf1 350 15 16 120 0.3695 0.0245 0.0622 4 Conf2 200 2 100 200 0.0275 0.3675 0.9301 1 Conf3 250 3 200 180 0.0347 0.3416 0.9075 2 The best configuration has changed and is now Configuration 2 (Conf2), with 92% satisfaction among business users. The worst configuration is still Configu- ration 1 (Conf1), with only 6% satisfaction among business users. We can clearly see that a different softgoal weight will lead to different configurations. 6 Lesson Discussion, & Research Challenges The TEAEM approach by integrating softgoals ensures that qualitative at- tributes such as user satisfaction, security, and performance are prioritized, re- sulting in configurations that align more closely with business goals. The unified CIM-PIM-PSM model enhances coherence and traceability across abstraction levels, leading to fewer errors and more complete configurations. This integra- tion ensures that technological choices made at the PSM level are consistently reflected across all levels, reducing the risk of inconsistencies. TEAEM-generated configurations exhibit fewer errors and higher completeness, as validated by model checking. The use of the TOPSIS method for MCDM in TEAEM facilitates the selec- tion of optimal configurations based on multiple softgoal criteria. This approach allows business users to make informed decisions quickly, balancing trade-offs between competing goals. Empirical data show that TEAEM reduces the time required for configuration generation and decision-making compared to manual methods and other SPL approaches. Compared to other approaches, TEAEM adds value in model-checking val- idation and constraints analysis propagation for bottom-up traceability. MDA focuses on top-down design, traceability, and alignment of goals from business goals to code generation. ArchiMate is designed to provide a comprehensive, integrated view of enterprise architecture, focusing on the relationships between Title Suppressed Due to Excessive Length 15 different domains (such as business, application, and technology). However, it does not inherently include specific mechanisms for detecting and managing in- consistencies between different model types. Additionally, while ArchiMate can represent various goals and requirements, it does not explicitly focus on guiding product generation through softgoals. The implementation of TEAEM and the various evaluations carried out have allowed us to learn the following lesson: – Business users have the ability to express their preferences on the different softgoals, and expressing these preferences will have a technical impact. The weight or importance that a business user assigns to a softgoal during the configuration of a product in a Software Product Line (SPL) significantly influences the best configuration that can be proposed to them. TEAEM presents certain limitations, such as the complexity involved in for- malizing utility functions for systems with non-linear attributes. This complex- ity can challenge the accurate quantification and optimization of softgoals. Also, managing the explosion of the feature model in large-scale projects remains a significant challenge, potentially complicating the optimization of solutions for specific product derivations. Future work on the TEAEM approach should focus on developing formal guidelines for defining and applying utility functions, which will improve accu- racy and make the approach more adaptable across various scenario. Exploring advanced modularity techniques will be crucial for managing the complexity of feature models and addressing the feature model explosion problem, simplifying the process of configuration generation. Evaluating the methodology’s practical impact through real-world applications is also critical to ensure its effectiveness. By tackling these areas, the TEAEM approach can be further enhanced to offer greater value in enterprise modeling. 7 Conclusion In this paper, we extend the Technology-Aware Enterprise Modeling approach by incorporating softgoals to generate configurations within Software Product Lines. Our enhancement addresses the limitations of MDA methods in managing non-functional requirements, which are essential for user satisfaction. Our primary contribution is the unification of the CIM-PIM-PSM into a single model, ensuring a traceable design process that connects business goals with technical implementations. We also integrate model checking and impact analysis to detect inconsistencies early, aiding decision-making and minimizing errors. The second contribution integrates softgoals into the TEAEM process, enabling SPL configurations to meet both goals and softgoals, ensuring the final products align with both user needs and business goals. We demonstrate our approach using a counterfeit drug detection example in the supply chain, leveraging blockchain technology as a component. Future work will focus on managing feature models to address the challenge of feature model explosion. 16 E. Kiomba et al.