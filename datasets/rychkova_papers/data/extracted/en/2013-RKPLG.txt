1 Introduction Capacity to timely discover and to efficiently respond to rapid changes in the environment is a major goal of an enterprise of the future. According to [23][4], a firm’s ability to adapt to dynamic environments depends first on the agility of its business processes. Therefore, design and development of new process management systems enabling process adaptation at run time are essential. defines a process as a sequence of events occurring in system [16], where Lamport each event is triggered by an action. Accordingly, a business process can be seen as a sequence of events triggered by activities of business process actors. The majority of existing methods for business process design follow imperative principles, implying that the order of events is predefined. As a result, all meaningful process events need to be determined and corresponding actions need to be predefined at design time. At run time, processes follow the configured model with limited possibilities to deviate from the predefined scenario. Execution of a business process in a dynamic environment can be compared to navigating a ship towards its destination bay in uncertain waters. Very rarely can a ship follow blindly a predefined path: awareness about its current position and situation as well as navigation skills and dynamic path finding are essential to reach the destination. In this work, we discuss foundations and propose architecture for a system supporting dynamic and context-aware business process adaptability. First, we shift the traditional imperative paradigm for process design and exploit declarative principles: we represent a business process as finite state machine (FSM) [22] with a state representing a process situation at a given time and state transitions defining the possible process scenarios. The triggering events specify the underlying process semantics, i.e. conditions for state transitions. The FSM formalism makes the notion of process activity implicit while putting forward activity outcomes, which are modeled as triggering events. Therefore, the declarative process model focuses on “what” needs to be done in order to achieve the process goal and not on “how” it has to be done. This allows us to handle process events whose order of occurrence is undetermined and to define the corresponding handling scenarios at run time. Navigation in a stormy ocean depends on a skillful skipper and his capacity to select a right action to ensure that no incorrect scenario is executed. We design initial navigation rules for process guidance based on Formal Concept Analysis and Galois lattices [2][6]. We specify the resulting process as a set of activities that can be dynamically assembled at run time into one of the (non-forbidden) process scenarios. In general, such process specification can offer infinitely many alternative scenarios and a possibility to deviate from one scenario to another during the execution. We 1st formalize these properties of a process as the form of agility. Navigation in a stormy ocean depends on the capacity of the skipper to select a right action at the right moment, and with respect to the current situation: we define the 2d form of process agility as the ability to monitor and manage the process context and to dynamically select and/or alter the execution scenario accordingly. We extend the declarative process specifications with dynamic context models and mechanisms for dynamic context management [3][19][20]. We design navigation rules for processes guidance that handle both process events (events resulting from execution of process activities) and context events in a unified way. This is compatible with the FSM formalism: the nature of events triggering the state transition has no importance. The navigation rules ensure that no incorrect scenario will be executed with respect to a given context situation. Novel combination of declarative modeling principles, context-awareness and Formal Concept Analysis is the main research contribution of this work. The architecture for a context-aware business process engine (CAPE) summarizes our findings. The remainder of this paper is organized as follows: in Section 2, we discuss the state of the art related to business process design and associated agility problems; in Section 3 we formalize two forms of business process adaptability. These theoretical foundations are used in Section 4 to specify the architecture of our context-aware agile business process engine (CAPE). We finally illustrate our findings on an example and present the perspectives of this work. 2 Motivation and Related Work Workflow-based approaches are highly efficient for process design and management assuming that: (i) all the events triggered by process activities are well determined; (ii) human involvement is limited to “accept”, reject” or “select from the list” types of decisions; and (iii) the system within which a process is executed can be considered as closed: no external event affecting the process execution can occur. For a large category of processes, however, these assumptions do not hold: in health care, the same therapy may have different effects on different patients; in insurance, claim processing extensively involves human expertise and decision making; in business, many processes have to cope with evolving economic conditions and frequent changes of customer requirements. The limited capacity of imperative methods to deal with changes has been recognized by both researchers and practitioners [30]. Numerous approaches propose to improve the dynamic process adaptability: In [25][15][26] the concept of configurable process is presented and different modeling formalisms to deal with process configurability are defined. Process configurability allows to instantiate a process model according to the context and to improve the process adaptability. At execution, however, the process will either follow the preconfigured model or select from a limited set of variations [26]. Other works aim at improving run time adaptability through modification of the predefined workflow during execution [21][29]. The authors propose deviation mechanisms to ensure flexibility while preserving the control over the process validity and correctness. As above, at the run time the process instances follow the preconfigured model (imperative) and support process adaptability only to some extent. Solutions for processes characterized by “unpredictability” are reported in numerous works [28][17][1][7]. In [28], the foundations and collection of experience reports on Adaptive Case Management are presented. These works emphasize run time adaptability. Markus et al. [17] propose a framework to support emergent knowledge processes, implemented in the TOP Modeler tool. In [1] process instances are represented as dynamically moving through state space. This approach relies on automated control systems and implements declarative modeling principles. Burkhart et al. [8] propose to explore the capabilities of recommender systems to provide the user with intelligent process-oriented support at run time. While handling dynamic activity selection and configuration of processes “on the fly”, the majority of proposed solutions demonstrate only limited capacity to deal with process contextual information in systemic and dynamic way. In [24][27], authors use context information for process definition. Roseman et al. [24] consider that external context elements may influence business processes (e.g. weather influences processes of a call center in an insurance company). They incorporate such elements into business process modeling. Saidani et al. [27] also consider context in business process definition, in particular, the roles played by actors. In these works context information is specified only at design time. Mounira et al. [18] propose a process mining architecture to identify context variables influencing process activities. However, no specific model formalizing these variables is proposed. 3 Foundations for CAPE In this section we define two forms of process agility and present our vision of context-aware business process management based on a fully declarative modeling combined with innovative context management and formal concept analysis. 3.1 Process Agility at Work: Agile Patient Care series1, As we could see in “House” American TV Patient diagnostics and treatment processes in a medical ward only partially rely on imperative procedures. The main challenge is to be aware of the patient situation and its evolution and to adjust the 1 http://en.wikipedia.org/wiki/House_TV_series treatment accordingly. Contextual parameters that might be relevant and should be managed include (but are not limited to): Patient’s measurable body conditions (temperature, blood pressure, heart rate); - Patient’s medical record; - Patient’s life style; - Information about recent workload, leisure activities, trips. - Some of these parameters are stable (e.g. predispositions, allergies, etc.), others can evolve (e.g. new information about the patient’s medical history, recent activities), and some others may change several times a day (e.g. body temperature). The capability to immediately react by canceling/prescribing new tests or medications is essential. 3.2 First Form of Process Agility We define the first form of business process agility as a capacity to handle unpredictable sequences of system events. This implies that the order of process activity invocations is defined dynamically, at run time, and depends uniquely on the current situation (process state) rather than on a predefined execution scenario(s). 3.2.1 Declarative Approach to Process Specification To ensure the first form of agility, we shift the traditional imperative paradigm in process specification and exploit declarative principles: we represent a business process as a finite state machine (FSM) – a state-transition system - that allows us to handle process events (and context events – see Section 3.3) with undetermined order of occurrence and to define the corresponding scenarios at run time. A FSM [22] specifies a machine that can be at one state at a time and can perform a state transition as a result of a triggering condition (event or group of events). It is defined by a (finite) set of states and a set of triggering conditions for each transition. Mathematical model: A FSM can be defined as a quintuple < Q, ∑, δ, q , F > where: 0 Q = {S , S , … S }- is a finite set of states; 0 1 n ∑ = {E , E , … E }- is a finite set of triggering events (input alphabet); 1 2 m ∑ δ: Q x P(Q) is the state transition relation; S Q is the initial state; ∈ 0 F Q is the set of final states. ⊆ A business process can be modeled as a finite state machine where: A FSM state s Q represents a state of the process at a given time. It is - ∈ described by the states of its parameters (e.g. order: {in preparation, delivered, paid}, patient: {admitted, in diagnostics, under treatment, discharged}). FSM triggering events ∑ represent events that may occur during the process - execution (e.g. change of patient’s body temperature resulting from medication etc.). Note, that process activities are implicit within FSM formalism: only the events resulting from an activity execution are observable. FSM transitions represent transitions between the process states. - δ FSM final states F represent the process outcomes (order delivered, patient - discharged, etc.) and can be associated with the process goal. Representation of a business process using states and transition is not new: [31] presents DecSerFlow language for Declarative modeling of service. In [21] authors present the DECLARE system to support declarative (loosely-structured) process models. Both use formal semantics based on labeled transition systems. In [1][5], the process execution is presented as a trajectory in the process state space. The process model is specified as a set of formal rules describing the valid paths of the possible trajectories. Our approach extends this paradigm and uses the FSM formalism as a common ground for process model, context model and formal concept model. Example: Agile Patient Care (continued) To illustrate the FSM formalism, we develop our example on agile patient care and model a (simplified) patient treatment process as a FSM illustrated in Fig. 1: After a patient is admitted (S ) to a medical ward (the initial state), a physician 0 examines him in order to obtain information for diagnostics (S ) and further treatment 1 (S ). Diagnostics may involve one or multiple examinations and/or generic or specific 2 tests. The patient’s case is then assessed and a treatment is prescribed. During the treatment, additional examinations can reveal new patient’s condition and require to modify the assigned therapy and, even, to repeat diagnostics and assessment. Once the therapy is terminated and the patient’s good condition is confirmed, the patient is discharged (S ) from the ward. In this example, we identify four states: Q={S , S , S , 3 0 1 2 S } and six process activities that can be executed during the process and trigger state 3 transitions from S :Admitted to S :Discharged states (Table 1). 0 3 Fig. 1. A finite state machine (FSM) representing a patient treatment process. The events E and the state transitions they trigger are shown as labels According to our formalism, an activity A is described with a pair <S, E > where: A ! S Q is the set of states from which this activity can (but not necessarily will) be ⊆ invoked;! ! E ∑ is the set of events that can result from the activity execution and can ⊆ ! potentially trigger a state transition. For each activity A, the state transitions that can be triggered upon its termination can E be calculated as: : S x P(S). δ A For example, the activity A2 (Medical laboratory test) is specified as follows: S: {S1, S2}; E:{E5, E6, E7}. Note that some events can result from a process activity and can be context events (cf. Section 3.3) - independent from activities. (e.g. E10 – condition improved). Table 1. Abstract activities and events defined for the Patient treatment process Activity Avail. at: Process events (Activity outcomes): A1 Physical S0, S1, S2 E1 Confirms the declared symptoms examination E2 No problem found E3 New symptoms emerged E4 Supplementary medical tests are required A2 Medical S1, S2 E5 Positive results (anomalies detected) laboratory E6 Negative results (no anomalies detected) test E4 Supplementary medical tests are required A3 Specific S1, S2 E5 Positive results (anomaly detected) medical tests E6 Negative results (no anomaly detected) E4 Supplementary medical tests are required A4 Case S1 E7 Diagnose confirmed, treatment assigned Assessment E8 Diagnose not confirmed, patient discharged E4 Supplementary medical tests are required A5 Therapy S2 E9 Condition declined (e.g. symptoms increasing) E10 Condition improved (e.g. symptoms decreasing) E11 Side effects emerged E3 New symptoms emerged E12 Stable situation E13 End of therapy A6 Recovery S2 E3 New symptoms emerged E14 End of recovery therapy Context events: E15 New medical / personal evidence received E3 New symptoms emerged E9 Condition declined, (e.g. symptoms increasing) E10 Condition improved (e.g. symptoms decreasing) 3.2.2 Formal Concept Analysis and Galois lattices Within our model, the partial ordering of process activities is determined by the state transition relation P(Q). This relation specifies the valid transitions with respect to the process goal (its final state) and ensures that invalid state transitions (e.g. to discharge a patient with critical temperature) will be avoided. This relation can be specified with Formal Concept Analysis (FCA) [2] [6]. FCA is a mathematical theory relying on the use of formal contexts and Galois lattices defined below. The use of Galois lattices to describe a relation between two sets has led to various classification methods [8] [33]. Since then, they have been used in numerous contexts to extract hidden knowledge from data. Let us first introduce FCA terminology [12]. Mathematical model: Let K = (G, M, I) a formal context, where G is a set of objects, M is a set of attributes, and the binary relation I G x M specifies the attributes of the different ⊆ (.)I objects. Derivation operators noted are defined for A G and B M as follows: ⊆ ⊆ AI BI = {m M│∀ g A : g I m} = {g G│∀ m B : g I m}, ∈ ∈ ∈ ∈ AI BI where is the set of attributes, which are common to all objects from A and is the set of objects which share all attributes from B. A formal concept of the context (G, M, I) is a pair (A, B), where A G and B ⊆ ⊆ BI AI. M, A = et B = The set A is called the extent of concept (A, B) and B is its intent. A concept (A, B) is a specialization of concept (C, D) if A C, which is equivalent to ⊆ D B. This is noted (A, B) (C, D). Reciprocally, the concept (C, D) is a ≤ ⊆ generalization of concept (A, B). The set of all concepts and their partial order relation constitutes a lattice, called Galois lattice of the context K. The major interest of a Galois lattice is the structure it provides through the conceptual clustering of objects according to their common attributes. This allows the identification of the most conceptually significant objects and attributes. Another interest of Galois lattices is that association rules can be inferred automatically from them. Several works have indeed applied FCA to the extraction of relevant association rules [13] or to perform sequential pattern mining [11]. Within our approach, process states Q, triggering events ∑ and process activities defined in Section 3.2 form a formal context and can be analyzed using Galois lattices. Process states and activities can be clustered revealing their conceptual properties: For example, we can determine activities that can be executed (or suggested for execution) under given conditions and with an objective to trigger a desired state transition. Fig. 2 represents Galois lattices built from the formal context defined in Table 1. The lattice in Fig 2a clusters activities into (possibly overlapping) groups according to the common events shared by the activities within each group; The lattice in Fig 2b represents the sets of activities enabled for each state. We exploit Galois lattices as a recommender mechanism, which makes suggestions about activities to execute. This mechanism is explained in Section 4. Each concept of the lattice contains a set of activities (white labels) described by the events they share (grey labels). The links between concepts are generalization/specialization links. Note that nodes inherit events from concepts above them and that they inherit activities from concepts below them. The lattice has an upper bound (top concept), which contains all activities (through inheritance) but no event (i.e. there is no event associated with all activities). The lower bound of the lattice (bottom concept) contains no activity and all events. a) Activity – Event formal context b) Activity – State context Fig. 2: Galois lattices. Let us consider the concept containing only activity A1 and the concept containing only A4 in its extent (Fig. 2a). We see from the intent that A1 may have events E1, E2, E3 or E4, and A4 – events E4, E7 or E8 as their outcomes. These two concepts are generalized by the concept {(A1, A2, A3, A4), {E4}}, which contains activities A1, A2, A3 and A4, all described by the common event E4. Along those lines, the concept {(A1, A2, A3), {S1, S2}} in Fig.2b shows the activities described by common states S1 and S2 – the states where these activities can be executed. 3.3 Second Form of Process Agility We define the second form of business process agility as a capacity to adjust the process execution scenario according to the current contextual situation. Process activities are assembled at run time, according to observed context and with an objective to trigger a state transition required for achieving the process goal (defined as one of the final states of a FSM). Dey [9] defines a context as any information that can be used to characterize the situation of an entity (a person, place or object) that is considered relevant to the interaction between a user and an application. The notion of context adopted in the literature is mostly user-centric and limited to physical aspects (e.g. location, user preferences, or user device)[19]. Together with Dourish [10], we argue that the notion of context is larger and includes information related to organization and processes: “context – the organizational and the cultural context, as much as the physical context – plays a critical role in shaping action and also in providing people with the means to interpret and understand action”. In our example, patient treatment process can be influenced by the emergence of new symptoms or the arrival of new resources (e.g. new medical/personal evidence, etc.). The second form of business process agility consists in taking into account such context information during process execution. The context parameters reflect our awareness about external and internal information about the process; they can be observed and measured. Even though context-awareness for business processes is addressed in the literature [24] [27] [18], the lack of formalism for context representation and management persists: many of the proposed context models are static (need to be defined at design), incomplete (consider only limited context information) and specific to workflow-based processes. We argue that the number and kind of context parameters may vary from one situation (or process state) to another [9] making it impossible to exhaustively model all required context information within a single (static) context model. The context model, therefore, needs to be dynamically instantiated from an appropriate metamodel according to specific (evolving) context dimensions. 3.3.1 Dynamic Context Modeling According to Najar et al. [19], the formalism chosen for representing context model determines the reasoning methods that can be used to perform system adaptation to the observed context. A context model (i) ensures the definition of independent adaptation processes and (ii) isolates this process from context acquiring techniques. The same applies to context-aware business process. We claim that the process context information should be acquired, modeled and formally analyzed at run time in order to adapt business process execution and to ensure business process flexibility. Several context models have been proposed in the literature [19] [3]. Based on these works, we define a common meta-model presented in Fig. 3. In this meta- model, we consider context as a set of context elements that are observed for a given subject (e.g. the patient, a device, a resource, etc.). Each subject can be associated with multiple context elements (location, status, etc.); for each context element, we observe values that can dynamically change. Semantics of context elements can be described using ontologies [19]. Ontologies also provide reasoning mechanisms, i.e. inference rules. Fig 3: Context meta-model considering context as a set of context elements Mathematical model: We formalize the context of a subject s in a time t as follows: Context(s,t) = { Element(s, ce) }, where Element(s,ce) represents the observed value of the context element ce for the subject s. In our approach, process states Q defined using FSM formalism in Section 3.2 can be extended with the context information: Each state S Q can be associated with a ∈ (set of) subject and its contextual elements to observe: S = {Context(s,t)} FSM triggering events ∑ represent both (i) context events occurring during the process execution and/or (ii) events resulting from executed process activities – process events. Based on context ontology, we represent context events as logical constraints over context concepts and their observed values. As a result, a FSM processes both contextual and process events in a unified way. These events can be expressed using logical conditions on observed values of contextual elements. Note that process activities are implicit within FSM formalism: only the events resulting from an activity execution are observable. In our example, a subject s – patient – is observed in all the process states. The contextual elements ce associated with a patient include his body temperature, blood pressure, patient record etc. Patient’s condition can decline (patient’s temperature may evolve from ‘36.5°C’ to ‘39.7°C’) or new evidence about the patient can be received by e-mail. Triggering event E9 (condition declined – see Table 1) can be expressed using the following condition: Element(#patient, #temperature) > 38.5. 3.3.2 Context Model and Concept Analysis Fig. 1 shows both the process and the context events that are taken into account by the patient treatment process. Context events affect state transitions and play the role of triggers, similarly to activity outcomes. For example, the patient treatment (S2) can be changed either as a result of physical examination outcomes (E1) or as a response to the new symptoms (E11), or because a new evidence about the patient (e.g. allergies, predispositions, past incidents, etc.) (E15). Galois lattices are particularly adapted to our context-aware approach: we use Galois lattices to analyze FSM triggering events (see Section 3.2) regardless their nature (process events or context events). Indeed, FCA has already been successfully coupled to context modeling [32]. The authors have proposed a spontaneous, personalized and dynamic way of defining and joining user communities. They use a lattice-based classification and recommendation mechanism that analyzes the interrelations between communities and users, and recommends new communities, based on user interests and preferences. 4 Architecture for CAPE In this section, we define the primary elements and the architecture for context-aware business process engine (CAPE) that is grounded on our theoretical foundations. To support the forms of agility introduced above, we define the following primary elements for a context-aware process engine: activity repository, context monitor and navigation manager, as illustrated in Fig. 4. Fig. 4. CAPE architecture: the context monitor, the activity repository and the navigation manager. 4.1 Activity Repository Activity repository represents a set of activities related to a business process. Each activity is specified with states S from which it can (but not necessarily must) be executed during the process, and with the set of events E representing its possible outcomes as defined in Section 3.2.1. The pair <S,E> is an activity signature. These signatures are further used by Navigation Manager. The activity repository represents crew skills and technical capacity of a ship. 4.2 Context Monitor Context monitor is in charge of observing, at run time, context elements and subjects from the environment. Its role in CAPE architecture is similar to a watchman in a ship: it observes navigation conditions and reports them to the navigation manager. Context monitor is based on the context meta-model described earlier. Similar to [20], it recognizes context elements by plugins, which feed the monitor with dynamic information about a given context element from a subject (e.g. a plugin reading patient’s heart rate or medical resources’ location from their id card). Context monitor can be dynamically extended by adding new plugins for observing new context elements and subjects. Context values dynamically observed by context plugins define the current position of the process in its state space. This position is further used by the navigation manager for calculating/adjusting the next process stepsand for recommending the activities to execute. 4.3 Navigation Manager Navigation manager makes navigation decisions, like a skipper in a ship. It determines one (or several) plausible activity to execute with respect to the process goal and the contextual situation. Specifically, navigation manager takes into account the current state of the process, the context events and the signatures of activities defined in the activity repository. Based on the navigation rules, it determines a set of activities enabled in a given situation and calculates those of them that will have a highest probability to result in the desired outcome. Navigation engine is the core element of CAPE architecture: it links together the other elements. The functionality of CAPE can be described as follows: this engine enables the activities for execution, captures the events (internal or external) and generates state transitions (Fig. 4). Considering that the process objective is specified by its final state (or states), the engine should also assure an appropriate guidance for the decision maker (a human agent): it recommends him the activities that would maximize chances to trigger a transition leading towards the process goal. We illustrate the functioning of CAPE on our example: Example: Agile Patient Care (continued) Once a patient has been admitted (S0) and the result of his physical examination (A1) has confirmed the declared symptoms (E1), he is in diagnostics (S1). The targeted final state for our process is S3: discharge the patient. The goal of the navigator is to provide recommendations in order to reach this state as quickly as possible, while respecting medical protocols and taking into account the contextual situation. In the following, we describe the sequence of operations performed by the navigator to meet this goal. 1. Selection of the next transition towards the targeted final state Fig. 1 illustrates the various possible paths from one state to another. The underlying graph is directed, nondeterministic, with possible cycles. From this graph the navigator computes the shortest path from S1 to S3, which consists in using the direct link from S1 to S3 (any other path goes through a higher number of states). The next step, in our example, is to trigger the transition from S1 to S3. 2. Identification of relevant activities may2 The navigator now has to identify the events, which trigger a transition from S1 to S3. According to our FSM (Fig.1) and the state transition map, the triggering conditions for a transition S1 - S3 are the following: Additional physical examinations and/or medical laboratory tests reveal no ! anomaly or problem and the patient himself feels better - (E2 | E6)&E10, or Case assessment does not confirm the diagnosis (E8) ! 2 Our graph is nondeterministic: one event can trigger multiple state transitions (e.g. E11 – side effects emerged – can be handled both in the therapy states or can trigger a transition to the diagnostics state. This nondeterminism, in general case, can be resolved by refining the states and transitions, and by specifying the new navigation rules. Alternatively, a probability p can be associated with each of the possible transitions. To identify the activities that can be of a maximum utility with respect to our objective (transition S1-S3): Navigator identifies the activities in our repository that can ensure a desired ! outcome (a combination of events described above) using the Galois lattice illustrated in Fig. 2. For our example, the event E2 can result from the activity A1; E6 from A2 or A3; E10 from A5 or spontaneously as an external event, as the patient’s condition may improve independently from any activity from the medical staff. Navigator selects those activities that are enabled at the state S1 (according to ! their specification) using the Galois lattice illustrated in Fig. 2. For our example, the activities A1, A2, A3, A4 are available in S1 (In Diagnostic) state, whereas A5 is not. Thus, the activities A1 – A4 are potential candidates for execution in the state S1. 3. Selection of recommended activities based on their utility We calculate an utility of each scenario as its likelihood to trigger the transition S1- S3. For our example, A5 is not available at S1 and therefore, E10 can be expected only as a context event (i.e. we can observe this event when it happens but cannot control it). The following viable scenarios can be evaluated: a) A physician prescribes medical tests and/or makes additional physical examinations according to the declared symptoms. The spontaneous improvement of the patient is expected. b) A physician assesses the case based on the patient’s history (and examinations made upon patient’s admission to the ward). A combination of these scenarios is also possible. Depending on the probabilities of transition S1-S3 resulting from each of the aforementioned scenarios and also, on the probability to obtain the event E2 as a result of A1, E6 from A2 or from A3, and E8 from A4, the navigator may recommend specific activities to the medical staff. 5 Discussion and Future Work While providing a rich toolbox for process modeling, verification, and post-execution analysis, traditional workflow-based information systems are considered to be inflexible. Therefore, organizations nowadays are searching for a compromise between the automated user support and process flexibility at run time. Fig. 5a illustrates this dependency: the x-axis shows a degree of process flexibility (from highly structured to unstructured, ad-hoc processes); the y-axis shows a level of automated user support that can be assured by the system. The solid line depicts the dependency: the more flexible a process, the lower the user support provided for it; and conversely: the higher the expected level of user support, the more structured a process has to be. According to Burkhart et al. [7], “With increasing runtime flexibility, employees are confronted with an expanding decision space and they are needed to possess more expertise in dealing with the processes they are involved in.” Fig. 5b illustrates this dependency: the x-axis shows a degree of process flexibility; the y-axis shows a level of user expertise required for handling this process. The solid line depicts that more flexible a process is, the higher expertise level of an employee should be. The two forms of agility formulated in this paper aim at relaxing the requirements both for human expertise for a given level of process flexibility and for process rigidity (predefined structure) for a desired level of automation. This is depicted with dashed lines in Fig. 5a and 5b. Declarative approach for process design and use of formal methods enable a set of automated techniques for process analysis and validation based on model checking and theorem proving. Thus, they improve the level of automated user support allowing maximum run time flexibility. Context awareness and formal concept analysis enable automated recommendations and identification of alternatives. Their joint use provides flexible guidance to end users at run time and supports them with an expertise required for the process handling. This idea paper reported on research, which is currently at its early stage of development. According to the IS research framework [14], (i) we specified our business problem as a lack of automated support for business process agility; (ii) then we defined a relevant knowledge base for our research and outlined the foundations for CAPE; (iii) we built our design artifacts: we introduced the two forms of process agility – the constructs to be used for reasoning about business processes; we also defined a model and a method for specification of agile business processes based on FSM abstraction and formal concept analysis. We extended this model with the dynamic context model. We combined these artifacts in and proposed the architecture for context-aware agile business process engine (CAPE). a) Process flexibility vs. Automated user support b) Process flexibility vs. Level of employee expertise required Fig. 5. Relations between process flexibility and automated support / required level of user expertise. The solid line depicts the current trends in BPM; the dashed line depicts how CAPE architecture presented in this work can possibly change these trends. This work accomplishes the first part of the “build-evaluate” loop [14]. Evaluation of our designed artifacts and their refinement will be addressed in future work. More specifically, we envisage to demonstrate the utility of our proposed architecture, first, by developing detailed scenarios, then, by simulating them, and, eventually, by implementing CAPE architecture and studying its usability in real business environment. Usability metrics for CAPE will be also discussed in future publications.