1 Introduction The Case Management or Adaptive Case management is an emerging topic that has been extensively discussed during the last months by the BPM community. In a legislative system or health care, the notion of case has been known for many years: here by a case we understand the set of circumstances or facts related to a criminal act or a patient condition that requires a decision making and a treatment with respect to some norms or regulations. Whereas the norms are well defined, the case-related conditions can vary widely and evolve with time, preventing the agent responsible for the case treatment from applying a standard predefined template or model. The similar notion of the case has been recognized in business process management. The Case Management Process Modeling (CMPM) RFP released by OMG on September 2009 expresses the particular demand of practitioners in the case management solutions [1]. OMG defines case management as “A coordinative and goal-oriented discipline, to handle cases from opening to closure, interactively between persons involved with the subject of the case and a case manager or case team.” Systematic improvement of this process based on the user experience is one of the main objectives of adaptive case management approaches. This objective can be achieved by following the social production principle defined by the social software [26]:”Social production is the creation of artifacts, by combining the input from independent contributors without predetermining the way to do this.” Case management is an example of knowledge-intensive process that cannot be fully determined at design-time. Mechanisms of the process evolution and actors contributing in this evolution cannot be specified in advance either: for example, a manager is not any longer a passive process user, it is by aggregation, analysis, and mining [2] of case stories and associated user/designer/manager/customer experience the case management process can be improved. Therefore a mechanism to integrate the “innovative contributions not identified or planned in advance” should be provided. In order to benefit from the social software principles in business process management and case management in particular, the possibility to communicate, negotiate, and change a process definition based on the aggregated knowledge should be provided at all levels of the process lifecycle starting from the design. Thus, an ! appropriate formalism for business process modeling has to be selected. For the traditional formalisms accepted in the industry, such as BPMN or EPC, this represents a real challenge. Being almost systematically imperative and activity-driven, these formalisms encourage the early specification of the explicit order in which the activities of the process will be executed. On the other hand, these formalisms are often implicit in specifying data that is circulating throughout the process. Therefore, while presenting powerful techniques for modeling and control for the prescriptive business processes, these formalisms fail in specifying knowledge-intensive processes and case management processes in particular. Does that mean that to address the Adaptive Case Management a brand-new formalism is needed? We argue that the research methodologies and techniques developed during the past decade can be successfully tuned and then applied for the case management modeling. In this paper we discuss the use of Declarative specifications [3], Variability modeling [4], and FOL-based Formal semantics for modeling descriptive processes [5] and, in particular, case management processes. We assemble these theoretical concepts in the form of a modeling approach that we call DeCo – for Declarative Configurable process specifications. DeCo process specifications extend the BPMN notation (a de-facto standard for process modeling) providing a mechanism for descriptive process modeling, formal analysis, and step-wise evolution. The reminder of this paper is organized as follows. In Section 2 we provide the business process models taxonomy, position the case management in this taxonomy and discuss the existing business process modeling formalisms. In Section 3 we consider a mortgage approval process and attempt to model this process in BPMN-BizAgi (www.bizagi.com). Based on the encountered challenges, we formulate 5 issues that have to be addressed by a case management process modeling technique. In Section 4 we introduce DeCo process specification and illustrate how the aforementioned issues are handled in DeCo. Section 5 presents our conclusions. 2 From Business Process to Case Management 2. 1 Process model taxonomy Business processes models can be roughly divided into two categories: prescriptive and descriptive. Whereas prescriptive process models specify how things must/should be done, a descriptive process model aims at recording and providing a trace of what happens during the business process [6][25]. In practice, prescriptive models are used to specify processes with predictable sequences of simple tasks and well defined coordination rules (e.g. repetitive, highly automated production processes). Such process can be fully specified at design-time. Prescriptive modeling style, though, is inappropriate for knowledge-intensive processes based on the actor collaboration and information exchange. These processes are characterized by a weak predictability of task sequences and partially defined coordination rules; they can be only “sketched” at design-time by descriptive models. Fig.1 shows the examples of processes that can be specified using one or another (or both) modeling styles. In the global economy the growing interest of organizations to explore new markets can be observed. However, even a simple business process has to be adapted to a new execution context, depending on, among other aspects, cultural and legal considerations [7]. Thus, we distinguish another two categories of business processes models: context- specific and configurable. Highly specialized processes, defined for a given execution environment (e.g. a research experiment in chemistry or physics) can be captured by a context-specific model. Such processes are hardly reusable and for each new environment (or context) a new process (and its corresponding model) has toes be defined. Today, organizations are interested to consolidate their processes while keeping them customizable in order to reflect the context-specific parameters. Processes requiring a customization (such as role/task assignment, task ordering, and rule selection) upon their deployment can be specified using configurable process models. Case management. The glossary of RFP for CMPM defines case as “A situation, set of circumstances or initiative that requires a set of actions to achieve an acceptable outcome or objective. …” In [1], the case management process is addressed as a knowledge-driven process, where activities do not occur in a predefined order. In addition, case management processes supposed to not only anticipate the change of a business context at deployment, but also has to react in the consistent and organized manner on all the emerging case-related knowledge at run-time. Thus, we claim that case management processes shell be specified using descriptive, configurable models (top-right quadrant of our diagram in Fig.1). Specification can be configured at Negotiation at deployment and evitpircseD Specification the Oriental at run-time Criminal is fixed at marketplace Investigation design-time and is not Medical treatment supposed to Specification International evolve can be commercial evitpircserP Automated customized at transaction Manufacturing deployment Research Experiment in Internet Sales Physics Context-Specific Configurable Fig.1. Business process taxonomy. Case management can be considered as a descriptive, configurable process. 2.2 Modeling formalisms Literature provides various process modeling formalisms that we classify into four categories: activity oriented, product oriented, decision oriented and conversation oriented models [8]. The Business Process modeling formalisms defined by Unified Modeling Language, Event-Driven Process Chain (EPC), and Business Process Modeling Notation (BPMN) gain the wide recognition among practitioners today. All these formalisms are based on the activity-oriented and/or product-oriented paradigm for business process modeling. The most recent type of process models [9], [10], [11], [12] is based on the decision- oriented paradigm according to which the successive transformations of the product are looked upon as consequences of decisions. Conversation models are based on the speech act theory and on the principle that each sentence expressed by someone represents an intention, a commitment. BPMN 2.0 beta specification [13] published on August 2009 by OMG supports the increasing demand to the modeling collaborations, communication, and human actors involvement. Though, it incorporates the elements of the decision-oriented and conversational paradigms. A possibility to customize a business process taking into account an environment where this business process is instantiated is a part of the more general problem of flexibility. This problem was identified in [14] and [15] in general and in the context of WfMS respectively: Knoll and Jarvenpaa [14] introduce the term of flexibility as a form of alignment between organizations and their IT systems in turbulent environments. The authors recognize three types of flexibility in the context of IT: flexibility in functionality, in use and in modification. Heinl et al. [15] illustrate the necessity of flexibility in workflow management applications and identify two classes of flexibilities: by selection and by adaption. Another steam of research e.g. [16][17] favors what we refer to as declarative business process modeling. In [16] the representation of a business process as a trajectory in a state space is introduced. The authors attempt to declaratively describe the dynamics of a business process by defining a notion of a valid state and planning rules that make a state valid. Van der Aalst in [17] presents a case handling paradigm to cope with business process flexibility. In contrast to workflow management, case handling aims to describe what can be done to achieve a business goal but not what should be done and how. 3 Example: The Mortgage Approval Process Mortgage approval process is a typical example of a case management process. In this section, we provide a generic mortgage approval process description as defined by different financial institutions in the USA. The information provided below results from our study of multiple information sources (e.g. http://www.homebuyinginstitute.com/, http://www.mortgage-resource-center.com/, http://homebuyereducation.bankofamerica.com/, http://www.homeloancenter.com/ etc.) It represents a compilation of guidelines, recommendations, and descriptions of mortgage approval process, provided by different loan consulting firms, financial advisors, and banks and available on the web. 3.1 The Process Description A mortgage is a loan for buying a house. The terms and length of the mortgages are negotiable and can be adapted for the applicant’s situation. The mortgage approval process can be divided into the following steps: Pre-qualification; Formal application; ! Document review; Pre-approval; Property appraisal; Final approval; Closing. The goal of the pre-qualification step is to determine the potential mortgage amount that the applicant is eligible for. The purpose of the formal application is to provide the lender with documents characterizing in details the current financial situation of the applicant as well as his/her employment and credit history. Document review follows the formal application and may include the pre-approval step. The pre-approval letter issued as a result of this step indicates that the applicant is pre-approved by a lender for a specific loan amount. When the property is selected by the applicant, the mortgage lender initiates the property appraisal. The appraisal step defines the amount of the mortgage and a corresponding down payment. The lender makes “approve”, “not approve”, or “approve with conditions” final decisions based on the document review and the appraisal results. If the loan is approved, a commitment letter is issued for the applicant, and a closing date is set up. Closing (also called settlement) is a final step. During the mortgage closing, the mortgage lenders will need to purchase the house and hold the title as the applicant makes payments to them. 3.2 Specification of the Mortgage Case Management Process Using BPMN Considering the complexity of the complete process, in this paper we will focus on the Formal Application process step. The text below describes this step in details. Mortgage Approval: Formal Application 0 The applicant can request the application package by e-mail or by post. Alternatively, all the forms can be accessed on the Web. 1 Mortgage application can be submitted electronically or during a personal meeting with the mortgage lender. 2 The exact set of documents may vary depending of the financial institution and the particular situation of an applicant. These documents may include: The Social Security card; Record for past two years for residence address; Employer name, address; W-2 tax forms; federal income tax returns; Most recent pay-stubs, etc. 3-5 During the application, the lender provides the applicant with a Good Faith Estimate (GFE) of costs of loan closing; the applicant can be asked to make a final decision on the type of mortgage loan; also an interest rate for the loan can be locked in this phase. 6 Some lenders will give to the applicant an access to their website where the applicant can check on the approval status of his/her package. 7 Usually an application fee and the appraisal fee will have to be paid by the applicant during the mortgage application submission. The main purpose of this description is to illustrate the diversity of activities, actors, and information involved and to stress the unpredictable nature and variability of this process – the characteristics that make it’s modeling a challenging task. Figure 2 presents the model of the Mortgage approval process specified using BizAgi modeling tool. tnacilppA 5. Need to specify impact of 4. Need to specify data to different tasks and multiple flow possibilities the task flow 2. Need to specify role hierarchy, alternatives (possible replacements), and synonyms redneL egagtroM L A N M O R TI O A F C LI P P A 1. Need to specify Inputs/outputs while 3. Need to specify distinguishing obligatory and optional data, optional, obligatory and alternatives (possible replacements), and alternative tasks synonyms (identical artifacts called differently) Fig. 2. BMPN specification of the Formal Application in the Mortgage Approval process. 3.3 Discussion Modeling the mortgage approval process in BPMN, we have encountered the following challenges: Optional tasks. Modeling optional tasks represents one of the major challenges. For example, <Send the forms> task is not needed if an applicant has already downloaded forms from the Web or if he/she fills in the application on-line. Task Ordering. Many tasks, being obligatory for the process, cannot be preordered at design time. Based on the norms and policies of the concrete place/institution, their order may be specified at deployment (e.g. <Get an access to the approval status info>, <Get application fee>). However, some actions (e.g. <Lock in an interest rate>, <Get appraisal fee>) can be ordered only at run-time as they will be executed based on the data availability. Within the traditional BMPN formalism, task ordering can be expressed using a gateway mechanism; however, considering the large number of such ordering options, this mechanism is not efficient. An explicit specification of conditions under which one or another ordering should be applied is also challenging. In our BPMN diagram, the appropriate solution found was to leave the tasks that could not be explicitly ordered at design time outside of the process flow. Optional/alternative data objects and synonyms. The mortgage approval process consumes and produces a vast amount of data artifacts. Some of these artifacts may be obligatory, whereas the others can emerge (or be requested) in specific situations only. For example, the mortgage loan applicant can be asked to provide the mortgage lender with one or multiple different tax forms. The form W-2 (Wage and Tax Statement) is typically requested from all the applicants in USA (obligatory); the form 2555 (entitled Foreign Earned Income) should be provided by taxpayers who have earned income from sources outside the United States. In order to adapt to different applicant’s situations, the alternative data artifacts should also be specified. For example, the form 1040 is a commonly accepted tax return form, whereas the form 1040EZ is a simplified version of this form: for single and joint filers with no dependents the form 1040EZ can replace the form 1040 [source: wikipedia]. Some artifacts also can be called differently from one organization (or country) to another: the tax forms (or IRS forms) defined for USA corresponds to another tax forms in UK. For a mortgage lender working in both countries, having these synonyms explicit can be beneficial. Explicit modeling of data impact on decision making/task ordering. Data artifacts impact the task ordering and decision making at run-time. For example, if the purchase contract is provided during the application, the mortgage lender may want to immediately initiate the appraisal process. We have used BPMN artifacts to specify the relations between data and tasks where these data is required. The way the data is used in general can be indicated using annotations. However, neither one nor another mechanism is formalized in BPMN. Implicit impact of data on the decision making stays out of the process modeling scope within the existing formalism. Role assignment. Whereas abstract process participants – Mortgage lender and Applicant – are easily recognizable, concrete role assignment may depend on the financial institution: small banks have only several (2-4) roles associated with the process, whereas in the big agencies the application processing and decision making is more likely to be assigned to a number of different roles with different responsibilities. These roles can be assigned only upon deployment. As our study shows, the same task can also be performed by several roles – this postpones the role assignment until the run- time. In this section, we have listed only several challenges related to the case management process modeling. The modeling of negotiation and communication, internal decision making, modeling data/actor/task ranges are the problems that will be addressed in the future. To conclude our discussion, we formulate five requirements to a descriptive process modeling approach that the traditional formalisms can hardly meet and that we are going to address in further sections: 1. Need to specify inputs/outputs while distinguishing obligatory and optional data, alternatives (possible replacements), and synonyms (identical artifacts called differently). 2. Need to specify role hierarchy, alternative roles, and synonyms. 3. Need to specify optional, obligatory and alternative task. 4. Need to specify multiple flow possibilities. 5. Need to specify impact of data to different tasks and the task flow. 4 Declarative Configurable Process Modeling Notation (DeCo) In this work, we present the process modeling approach based on Declarative Configurable (DeCo) process specifications that extend the BPMN notation (a widely adopted standard for process modeling with more than 60 current implementations). 4.1 Theoretical Foundations The theoretical foundations of DeCo are grounded on Declarative modeling [3], Variability modeling [4], Refinement theory, and formal methods - the paradigms, proven in the research community. This work is largely based on the authors’ research reported in [5][18][19][12] and is inspired by the results presented in [20][21]. The declarative specifications for modeling business processes have been presented in [19]: this approach is based on the systematic modeling of process-related data. This allows us to introduce the notion of state. Each process task then can be associated with a set of pre-states - the states where this task can (but not necessary will!) be executed - and a set of post-states – the states resulting from the task execution respectively. Consequently, the process specification represents a set of activities (tasks to be done) with no predefined execution scenario. The declarative modeling principles allow one to postpone the decision making about the process control flow until its deployment or even execution. As soon as declarative process specification evolves - the mechanism to validate and to control this evolution is required. In the work presented in [19] the evolution from the declarative, nondeterministic process specification at design time towards precise (imperative) process specification at deployment is represented as a set of refinement steps. The notion of refinement for graphical specifications, adopted from software engineering [3], is presented in [5]. In this work, the formal semantics for graphical specifications is defined based on first order logic and set theory. These semantics allows us to reduce the problem of refinement verification to the validation of the first-order logic formula and provides the means for automated process analysis and control using the tools for automated analysis of program specifications defined in software engineering. The technique presented in [19] allows one to demonstrate that different control flow configurations of the process are valid with respect to a high-level declarative design specification. However, to deal with descriptive processes (and the case management in particular) the process configurability should not be limited by a control flow. In the literature, several major perspectives of the process models are specified [23]: the control flow perspective that captures the temporal ordering of process tasks, events, and decision points; the data perspective that captures the lifecycle of data objects (creation, usage, modification, deletion) within the process; the resource perspective that describes how the process is carried out within the organization and deals with roles and resource assignments; the operational perspective that addresses the technical aspects of process execution and specifies the elementary process tasks and their assignment to concrete applications or application components of the organizations; the context perspective that describes the attributes related to the process execution context; the performance perspective, addressing the process cost effectiveness. In [5][20][21][22] the concept of configurable process has been presented and the modeling formalism to deal with process configurability at multiple perspectives is defined. Namely the authors present the Configurable Integrated EPC (C-iEPC) modeling notation that extends the well known Event Process Chain (EPC) notation and addresses the process configurability along the control-flow, data, and resource perspectives. According to this approach, “Given a configurable process model, analysts are able to define a configuration of this model by assigning values to its variation points based on a set of requirements. Once a configuration is defined, the model can be individualized automatically..” Individualization process can be considered as automated synchronization of the process model perspectives in respond to each configuration decision. This guarantees the correctness of individualized process models by construction. To introduce the notion of correctness and to reason about individualized and configurable models, authors define formal semantics for C-iEPC based on FOL [20]. 4.2 Multi-perspective configurability Inspired by the approach presented in [20]-[22], we propose to address the 3 out of 5 requirements defined in the previous section using the multi-perspective configurability as follows: 1. Need to specify inputs/outputs while distinguishing obligatory and optional data, alternatives (possible replacements), and synonyms (identical artifacts called differently). - This requirement can be addressed by providing configurability along the data perspective. 2. Need to specify role hierarchy, alternatives (possible replacements), and synonyms. - This requirement can be addressed by providing configurability along the resource perspective. 3.Need to specify optional, obligatory and alternative tasks. This requirement can be addressed by providing configurability along the operational perspective. Due to space limitations, we consider in more details only the DeCo implementation of the data configurability. Figure 3 illustrates the data object hierarchy models for Tax forms and Tax return forms required for formal mortgage application in USA. Vast amount of data artifacts consumed and produced by a process represents a challenge for modeling. The hierarchy model of data objects describes: generalization-specialization relations between data objects; • alternatives – data objects that can replace the data object originally required by the • task; For example, the Form 1040EZ can be considered as an alternative of the obligatory 1040 form. The rule 3.2 specifies the condition where this alternative is applicable. Such rule can be described as a text or formalized in FOL. • synonyms – different terms referred to the same data object. For example, in USA, both tax forms and tax return forms can be called Internal Revenue Service (IRS) forms ! [source: wikipedia] ! Fig. 3 The data object hierarchy model for the Formal Application 4.3 Declarative specification of tasks The last two requirements: 4. Need to specify multiple flow possibilities 5. Need to specify impact of data to different tasks and the task flow can be addressed applying the declarative modeling principles as explained in [19][5]. Formal semantics permits to express the action contracts in terms of pre-condition, post- condition and invariants. We define a formal semantics for DeCo specifications based on first-order logic (FOL). Similarly to results presented in [5], it can be used for the mapping of a DeCo specification to the Alloy specification language [24] for further validation. At run-time, at any moment a process enactment is characterized by its state (a case X ( p , p ,.., p ) = state). We define a case state in DeCo as a vector . The 1 2 n p , p ,.., p components are values of data objects related to this case at a given 1 2 n Σ moment of time. A state space is a set of all possible states of a case. A For every process task we define a precondition and a postcondition. Postcondition A A is a condition that a case meets after the task termination. Precondition post pre specifies a condition that must hold upon the task invocation: If A is started in a state A post A satisfying , it is guaranteed to terminate in a state satisfying . pre Σ Precondition and postcondition are modeled as predicates over state space : A : {true, false}, Σ → pre A : {true, false} Σ × Σ → post In addition to pre- and postcondition, invariants for process tasks can be specified. A Invariant is a condition that holds before and after the task execution. inv X X ' A Task defines a transition of the case from state to state (pre- and post-states respectively). We define a task in DeCo as a binary FOL-formula A : {true, false} Σ × Σ → . We specify the task using logical implication between precondition and postcondition: def A( X , X ') A ( X ) A ( X , X ') = → pre post X If at a given state the precondition Apre of the task A holds, then the case will be transited to a A X ' state , for which the postcondition of A - - holds. post Preconditions, postconditions and invariants explicitly relate tasks with data objects within a case. Example: To specify the contract for the <Send the Forms> task from Fig.2, we define 2 supplementory predicates: ∃ ∧ isReceived(d: DataType, a:Applicant) { m:ReceivedMessage | m.content = d m.src = a } ∃ ∧ isSent(d: DataType, a:Applicant) { m:SentMessage | m.content = d m.dst = a } The former predicate evaluates to True if in the process there exists a message m received from an applicant a that contains a data object d. Along those lines, the second predicate evaluates to True when the message m with a content d is sent to an applicant a. We define the precondition and the postcondition for the <Send the Forms> task as Pre: isReceived(FormRequest, applicant); Post: isSent(AppForms, applicant) follows: There are no invariants specified for this task. The task itself can be denoted as follows: ∀ apl:Applicant | isReceived(FormRequest, apl) -> isSent(AppForms, apl) : Whenever the process receives a form request from an applicant apl, then the execution of this tasks will move the process in the state where the application forms are sent to this applicant. 5 Conclusion and Future Work OMG RFP demonstrates the increasing interest and the particular needs of the practitioners in the methodologies and tool support for case management process [1]. According to OMG RFP, the objectives of the Case Management methodologies or tools are (i) to accommodate and structure the knowledge of participants about the current case, (ii) to provide the information of the previous similar cases and help the practitioners to learn from best practices, and (iii) to progressively improve case management processes to make them “evolve toward prescribed processes.” DeCo defines the concepts for systematic gathering, and structuring the information about the data (consumed or produced), the roles, and the tasks of a process. Namely, based on the configurability modeling along multiple process perspectives, we specify generalization/specialization, synonym, and alternative relations. Compared to traditional business process modeling formalisms, DeCo provides the means to support the prescriptive nature of the case management process: the declarative modeling principles allow the designer to specify the set of activities that could (but not necessary will) be executed during a process invocation together with the conditions under which this execution can be possible: {pre, post, inv}. Though extending it, DeCo is based on the BPMN graphical notation. Our main objective with DeCo is not to provide yet another set of concepts and shapes representing them, but to reuse as much as possible the notation that (a) has already been known and used by practitioners for years and (b) has a significant developers’ support. This can help us to get a useful feedback from the BPM practitioners’ community while conceptualizing DeCo. Social software is software that supports the interaction of human beings. Thus, being largely dependent on such interactions, case management process can benefit from supporting tools based on the social software principles. The following three important missions can be successfully fulfilled by social software: (i) collection of process requirements for their further incorporation into the process design model; (ii) collection of the information related to the process context for the further process model customization at deployment; (iii) collection of the content (case subject) – related information at the process run-time for the further process model analysis and evolution (e.g. implementing process mining [2]).