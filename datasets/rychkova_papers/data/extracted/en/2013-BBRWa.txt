1 Introduction Business rules are everywhere. Every enterprise process, task, activity, or func- tion is governed by rules. However, some of these rules are implicit and thus poorly enforced, others are written but not enforced, and still others are per- haps poorly written and obscurely enforced [1]. In this work, we propose an in- teractive, simulation-driven approach for business rules discovery. This approach will provide a domain specialist with an instant feedback helping her to reason about the existing business rules, to discover new or implicit business rules and, eventually, to improve their enforcement. In addition, "capturing the logic of an entire business would require probably many thousands of rules; a smaller subsystem, perhaps several hundreds" [2]. They are often made by different people at different time, driven by different business ideas in mind. The rules consistency or the need to validate that a new rule does not con(cid:13)ict with the existing rules is a real problem. Our approach [3]; use of formal is based on rule modeling and simulation in Alloy Analyzer 2 Simulation-Driven Approach for Business Rules Discovery speci(cid:12)cations and model checking techniques allows us not only to discover the new rules but also to preserve validate their consistency. We illustrate our approach on the example of the Order Processing of G(cid:19)en(cid:19)erale Ressorts SA: we formalize the existing business rules in Alloy, then we simulate the Alloy model and analyze the generated instances. We discover a cluster of instances that is derived from the Alloy model and is not explicitly covered by the existing business rules. We generalize the property of this cluster as a speci(cid:12)c business case that, in fact, must be documented (restricted) with a corresponding business rule. We show that the new rule added to the model makes the model inconsistent and, thus, requires adjustments. We provide the solution, (cid:12)rst, in Alloy, and then, explain its meaning in business terms. The reminder of this paper is organized as follows: In Section 2, we discuss our motivation and present the related works; In Section 3, we introduce our example - the Order Processing, speci(cid:12)ed for G(cid:19)en(cid:19)erale Ressorts SA; then we formalize this example in Alloy and illustrate the BR discovery with Alloy Analyzer; In Section 4, we generalize our approach and formulate our (cid:12)ndings as XX steps to interactive BR discovery based on formal model checking; in Section 5 we present our conclusions. 2 Motivation and Related Work According to [2], "A business rule is a compact statement about an aspect of a business. Itâ€™s a constraint, in the sense that a business rule lays down what must and must not be the case. At any particular point, it should be possible to determine that the condition implied by the constraint is true in a logical sense; if not, a remedial action is needed." Many research and industrial publications are focused on challenges associ- ated with business rules (BR). In industry, vendors such as ILOG (currently a part of IBM), FICO Blaze Advisor and Pega Systems, Inc. have been developing business rule engines (BRE) since the late 1980s and are now leaders in an emerg- ing BRE segment [4, 5, 6]. In academia, the computer sciences and engineering outlets have been active in business rule research [7, 8, 9], with extensive studies in rule programming, meta-modeling, rule mining, rules engines, business user interfaces and their role in services orientated architectures (SOA). Furthermore, joint academic and industry developed Object Management Groups (OMG) Se- mantics of Business Vocabulary and Business Rules (SBVR) standards (released in September 2006), which is intended to provide standards surrounding BR structure, terminology, classi(cid:12)cations and meaning in BR authoring and reposi- tories [10]. Different approaches propose different phases in business rules management [2] the main phases are: discovery, de(cid:12)nition, review, life cycle (BRMLC). In maintenance. By [1] the main phases are: discovery, analysis, design, authoring, [11] these phases are: plan, capture, organize, author, validation, deployment. In distribute, test, apply. In this paper, we focus on discovery (i.e. capturing) phase Simulation-Driven Approach for Business Rules Discovery 3 of BRMLC. The goal of discovery phase is to identify the potential business rules impacting the domain segment in development. To see the effect of the introduced business rules, the designer must go through a number of phases, such as analysis, design, authorizing, validation and deployment. It would be much more effective, if the designer could get instant, visual feedback on how new business rules in(cid:13)uence the behavior of a process. Examples of the company behavior could help him to realize what constraints are missing in the model. We propose the approach based on Alloy simulation that helps to discover new BR in an interactive way, while ensuring the consistency and validity of the overall set of BR. Although BR traditionally are expressed in natural language [12], the works presented in [13] and in [10, 14] report on other forms of BR formalization: in [13], the diagramatic language is used; in [10, 14, 15] the rules are speci(cid:12)ed with formulas in modal logic. In this work, we use an Alloy speci(cid:12)cation language (based on (cid:12)rst order logic) and propose a technique for BR discovery based on model simulation and analysis in the Alloy Analyzer tool. 3 Business Rules Discovery with Alloy Analyzer In this section, we present the process of interactive discovery of business rules, which is based on formal model checking and implemented using the Alloy An- alyzer tool [3]. We start with introducing our example - the order processing, speci(cid:12)ed for G(cid:19)en(cid:19)erale Ressorts SA. First, we specify the order processing and its associated business rules in natural language; then, we introduce Alloy spec- i(cid:12)cation language [16] and model our example in Alloy. Finally, we demonstrate how the Alloy Analyzer tool can assist in interactive discovery and validation of business rules that have been missing/omitted/implicit in the initial business speci(cid:12)cation of Order Processing. 3.1 Case Study: Order Processing in G(cid:19)en(cid:19)erale Ressorts G(cid:19)en(cid:19)erale Ressorts SA is the market leader in watch barrel springs and a (cid:12)rst- class manufacturer of tension springs, coil springs, shaped springs and industry components [17]. G(cid:19)en(cid:19)erale Ressorts SA works with thousands customers and strives to ensure the highest quality both for its products and for its customer services. Order processing is one of the strategic activities in G(cid:19)en(cid:19)erale Ressorts SA: it covers a complete order life cycle, from order creation to payment and delivery. Whereas the company constantly improves its technological processes in order to shorten the production cycle, the payment may take months after the product is delivered1. Therefore, (cid:13)exible business rules for order processing and customer transactions management are essential for GR. G(cid:19)en(cid:19)erale Ressorts. 1 The "shipping after payment con(cid:12)rmation" policy is not acceptable for this industry in general and for G(cid:19)en(cid:19)erale Ressorts SA in particular. 4 Simulation-Driven Approach for Business Rules Discovery Order processing includes the following processes: order creation, order preparation, shipping and accounting. It is also closely related to the customer management processes in the company. The whole process, from the moment the customer makes an order to the delivery and the accounting is known as 1 [18]). order-to-cash cycle (Fig. In this paper, we de(cid:12)ne the (simpli(cid:12)ed) order processing activity that focuses on order creation, delivery and payment only: A customer submits an order request for manufacturing a watch component - a part; the con(cid:12)rmed order is then prepared and delivered to customer. As stated above, payment for the con(cid:12)rmed customer orders is a necessary condition to (cid:12)nalize the overall order processing transaction for a given order, though it is not required for order delivery. Below, we present list of business rules related to order processing: 1. Order creation BR1.1 A customer order can be created and con(cid:12)rmed only for the customers regis- tered in the enterprise information system. BR1.2 A customer order can be created and con(cid:12)rmed only for the parts existing in the product catalog. BR1.3 If an order request from a new customer is received, this customer has to be registered in the enterprise system. BR1.4 ... 2. Order delivery BR2.1 Every con(cid:12)rmed customer order must be eventually delivered to the customer. BR2.2 ... 3. Accounting BR3.1 Every con(cid:12)rmed customer order must be eventually paid by the customer. BR3.2 ... 4. Customer management BR4.1 Every customer record must contain one customer name. BR4.2 Every customer record must contain at least one valid billing address. BR4.3 Every customer record must contain at least one valid shipping address. BR4.4 Every customer record must be associated with a previous orders history. BR4.5 A customer whose transactions with GR is equal or superior to XX XXX euro per year receives a status of strategic customer at GR. BR4.6 A customer whose transactions with GR is inferior to XX XXX euro per year receives a status of regular customer at GR. BR4.7 Strategic customers must always be able to submit the order with GR. BR4.8 ... 3.2 Alloy Alloy [19] is a declarative speci(cid:12)cation language developed by the Software De- sign Group at MIT. Alloy is a language for expressing complex structural con- straints and behaviour based on (cid:12)rst-order logic. [3] is a tool for the automated analysis of models written The Alloy Analyzer in the Alloy speci(cid:12)cation language. Given a logical formula and a data struc- ture that de(cid:12)nes the value domain for this formula, the Alloy Analyzer decides Simulation-Driven Approach for Business Rules Discovery 5 Fig. 1: Order-to-cash cycle - Adapted from [18] whether this formula is satis(cid:12)able. Mechanically, the Alloy Analyzer attempts to (cid:12)nd a model instance - a binding of the variables to values - that makes the formula true. [20] The syntax of Alloy is similar to the syntax of OCL the Object Constraint Language for UML [21]. Data structures are represented with signatures la- belled by the keyword sig and (cid:12)elds. Alloy reusable expressions (i.e. functions) and constraints (i.e. facts, predi- cates and assertions) [16] can be used to reason about data structures and to de(cid:12)ne the relationships between them. In our previous work [22] we de(cid:12)ned the iterative process for service designe where the Alloy signatures, facts and predicates were used for service speci(cid:12)ca- tion. In this work, we extend the use of Alloy constructs: in particular, we use Alloy constraints for modeling and validation of Business Rules. By their de(cid:12)nition, business rules are intended to assert business structure or to control or in(cid:13)uence the behavior of the business [23]. Structural rules de(cid:12)ne the business information model. A behavioral rule, on the other hand, is about how the business reacts to business events. They are speci(cid:12)ed when something happens at the boundaries of the system [10]. In this approach we deal with both kind of business rules. Fact is a model constraint that permanently holds. We use Alloy facts to specify that must hold for entire model (i.e. structural business rules and be- havioral rules that are system invariants). For example: Every customer record must contain at least one valid billing address - is a structural business rule that can be modeled as an Alloy fact associated with a corresponding data structure specifying customer. Predicate is a constraint that holds in speci(cid:12)c context or for a speci(cid:12)c part of the model only. We use Alloy predicates to model the business rules with a clear scope or context. For example: If an order request 6 Simulation-Driven Approach for Business Rules Discovery from a new customer is received, this customer has to be registered in the enter- prise system. - this rule has a clear scope where it must be applicable. It can be modeled as an Alloy predicate. Whereas some business rules can be seen as restrictions or prohibitions and, thus, modeled with Alloy facts and predicates, other business rules have a different nature: For example "Strategic customers must always be able to submit the order with GR" - this business rule is not a restriction, but a necessity - a property that has to be ensured or provided de- 2 spite of any other conditions. We model this type of business rules using Alloy assertions. Assertion is a property that the designer believes should be implied from the model and can check if it can be deduced from the other (permanent or contextual) constraints. 3.3 Alloy Speci(cid:12)cation for Order Processing Order Processing in Alloy The data structure for the order processing is modeled using Alloy signatures as illustrated in Fig. 2. (a) Signature GR (b) Signatures OrderRequest Fig. 2: Design - Alloy Signatures Alloy signatures (sig) can be abstract or concrete, can have explicit cardi- nalities (e.g. only one OrderRequest object can be treated by the service at a time), and can contain one or multiple (cid:12)elds. Each (cid:12)eld indicates a relation to a corresponding object type and can be considered as an analogy of attributes in object-oriented (OO) languages: for example indicates that the name: one Name OrderRequest object has an attribute name of the type Name. We use one and set cardinalities for the (cid:12)elds to distinguish \one to one" from \one to many" relations. For the order processing example, we specify a system - GR - as an Alloy signature illustrated in Fig. 2a that is characterized by the following (cid:12)elds: partSet - the set representing all parts (watch components) that can be ordered; customerSet - the set of customers registered in the GR information system; orderCon(cid:12)rmedSet - the set of orderes created and con(cid:12)rmed in GR; 2 This distinction has been already proposed in [15], where two modal operators are de(cid:12)ned: necessity (with its negation: possibility) and obligation (with its negation: prohibition). Simulation-Driven Approach for Business Rules Discovery 7 orderDeliveredSet - the set of orders (subset of created and con(cid:12)rmed orders), which are delivered to their customers; orderPaidSet - the set of orders (subset of created and con(cid:12)rmed orders), which are paid by the customers. Similarly to [24], we adapt the state-oriented perspective and specify the execution of order processing in terms of a state transition: we de(cid:12)ne a pre- state - GR pre - that describes the state of a system (GR) before the order processing has been performed and the post-state - GR post - that describes the condition that must hold for the system upon the activity termination. The objective of our model - is to assist a business analyst in discovery of the (implicit of missing) business rules associated with order processing: to do so, we are going to investigate how the status of a customer orders is changing during the order processing activity. For a given order, this status can be identi(cid:12)ed by analyzing the orderCon(cid:12)rmedSet, orderDeliveredSet and orderPaidSet of GR. Note, that the same order can be in one or multiple sets at a time. For example, if the order is in the orderPaidSet - it is paid. Consequently, if the order is not in orderPaidSet in pre-state, but is added into orderPaidSet in post-state upon termination of a given activity, it means that it has been paid. The statuses cannot be canceled, i.e. once the order is paid, it cannot be "unpaid", etc. Once the data structure is de(cid:12)ned, we specify how the order processing will be executed (behavior). Following the description from Section 3.1, we represent concurrent3 the order processing activity as a execution of order creation, order payment and order delivery processes. Order processing and its three component processes are modeled as Alloy predicates. These predicates show a transition between GR pre and GR post states. The proposed speci(cid:12)cations are "black box" - they do not show how the corresponding processes are executed but only the (cid:12)nal result of their execution visible in GR (i.e. how the GR attributesorderCon(cid:12)rmedSet, orderPaidSet and orderDeliveredSet will "look like" upon the process termination). The predicates specify the conditions that must hold in GR upon order cre- ation/delivery/payment. For order creation this condition is: considering order creation business rules are respected (orderCreationBR), the new order must be created and added to the corresponding order set - orderCon(cid:12)rmedSet - in the post-state. For order delivery it is: Considering a customer with an unde- livered order in his order history (i.e. the order, which is not in the systemâ€™s orderDeliveredSet) in pre-state, this order must be delivered and added to the corresponding set in post-state. For order payment it is: Considering a customer with an paid order in his order history (i.e. the order, which is not in the sys- temâ€™s orderPaidSet) in the pre-state, this order must be paid and added to the corresponding set in post-state. Along those lines, the orderProcessing predicate (Fig. 3d) speci(cid:12)es that, upon the order processing termination, three processes (order creation, order delivery 3 We exploit the declarative approach to activity modeling and avoid the preordering of processes within order processing. 8 Simulation-Driven Approach for Business Rules Discovery and order payment) must be accomplished. In Alloy, this corresponds to a logical conjunction of orderCreation, orderPayment and orderDelivery predicates. (a) OrderCreation process (b) OrderPayment process (c) OrderDelivery process (d) OrderProcessing activity Fig. 3: Order Processing activity as a combination of order creation, order de- livery and order payment processes Business Rules To illustrate our approach, we use subset of the business rules given in Section 3.1. The business rules we select are: BR1.1, BR1.2, BR2.1, BR3.1 and BR4.7. These business rules are shown in Fig. 4. The business rules BR1.1 and BR1.2 are modeled as predicates, as they have an explicit scope - order creation process. In Alloy, BR1.1 states that the customer has to be registered in the customerSet in pre-state - before we start creating the order. This predicate (customerExists) is called in predicate order- Creation via orderCreationBR predicate (Fig. 3a). The predicate customerExists together with its call in orderCreation claims that the order can be created only if the customer is registered in the customerSet. BR1.2 states that for order cre- ation requested part should exist in the partSet in the order creation pre-state. Whenever we run orderCreation the rule will be automatically respected, as the Simulation-Driven Approach for Business Rules Discovery 9 new order will be created only if the customer exists in the system. Otherwise, the orderCon(cid:12)rmedSet will remain the same (Fig. 3a). BR2.1 is modeled as a fact. The fact claims that when we do delivery of order, all the existing orders will be eventually delivered in post-state. Similarly, BR3.1 is represented as a fact that claims the same for order payment. These rules have a global scope. Finally, BR4.7 is modeled as an assertion: we have to ensure that the strategic customer can always create new order despite of any other conditions. This is the \necessity" rule that we want always to hold. We write it as assertion, which can be checked in the model. The assertion claims that whenever there is an order request for the strategic customer for the existing part, the new order is created in EIS. If the assertion is valid, it means that this business rule is respected in the system. In case we get counterexamples, the rule is not respected and we need to revise the business rules. (a) BR1.1 - A customer order can be (b) BR1.2 - A customer order can be created and con(cid:12)rmed only for the created and con(cid:12)rmed only for the customers registered in EIS. parts existing in the product catalog. (c) BR2.1 - Every con(cid:12)rmed customer or- (d) BR3.1 - Every con(cid:12)rmed customer der must be eventually delivered to the order must be eventually paid by the cus- customer. tomer. (e) BR4.7 - Strategic customers must always be able to submit the order with GR. Fig. 4: Initial Business Rules 10 Simulation-Driven Approach for Business Rules Discovery 3.4 Business Rules Discovery for Order Processing Discovering New Business Rules Our approach to BR discovery is based on simulation. The idea is to simulate the Alloy model representing the subset of our system of interest (its structure, behavior and initial business rules modeled as Alloy constraints) and to analyze instances generated by the Alloy Analyzer tool. These instances, in our case, represent the scenarios of order processing enabled by our created model. The objective of model simulation is twofold: (cid:12)rst, to check our model for consistency (absence of contradictory constraints in business rules), and second, to test the random set of model instances generated by Alloy Analyzer for discovering (possibly) missing BRs. We call this phase a business rule discovery. Simulating order creation process, we (cid:12)nd the instances where the customer can make new order, even if he did not pay his previous orders that have been already delivered. This scenario is illustrated in Fig. 5. The scenario shows a regular customer (grey parallelogram on top) creating an order. This customer is associated with 2 orders (Order0 and Order1 ) in his history (black rectangles). Order 1 is already delivered and unpaid. Despite this, he was able to create the new order Order0. We know that this is the new order because we can see in pre-state view of the system that it was not in the orderCon(cid:12)rmedSet in pre- state and has appeared in post-state in Fig. 5. This could potentially bring to a company a lot of unpaid orders and short or long-term loses. The domain specialist decides weather he needs to de(cid:12)ne new BR to restrict this behavior to make sure the interest of the company is protected. In case he does, the designer translates the business rule into Alloy. Fig. 5: Order Accepted with Unpaid Orders in the History Business Rules Consistency Checking We provide a domain specialist with an instant feedback helping him to reason about the existing business rules, to Simulation-Driven Approach for Business Rules Discovery 11 interactively discover new or implicit business rules and, eventually, to improve their enforcement. Once the missing rule is con(cid:12)rmed by a business (domain) specialist, it can be added to our Alloy model. The new business rule covering this business case is: { BR1.3. New order cannot be created for the customer order if there are deliv- ered but unpaid orders in the customerâ€™s order history. This business rule represented in Alloy is in Fig. 6. This business rule has an explicit context - order creation. We model it thus as a predicate. In predicate customerMustPayDeliveredOrdersBeforeNewOrder, we claim that the all orders from customerâ€™s history that are delivered has to be paid. This predicate is called in orderCreation predicate via orderCreationBR. With combination of the three predicates, we claim the if we do creation of new order for some customer, his past orders that have already been delivered have to be paid. Fig. 6: BR1.3. New order cannot be created for the customer order if there are delivered but unpaid orders in the customerâ€™s order history. As a result, simulating the model, we observe no cases where the order is created and unpaid delivered orders exist for a given customer. However, when we check the validity of the business rule for strategic customer by running the assertion in Fig. 4e, we receive the result that it is not valid. The counterexamples show the cases where this rule is not respected (Fig. 7). In this example, we can BR4.7 see that the new order is not created for strategic customer, meaning (Fig. 4e) is not valid. As strategic customers are of crucial importance for GR, they should by-pass the new rule and be able to order even if they have some unpaid orders. Thus, by introducing the new rule, we have created a con(cid:13)ict with the existing rules and overspeci(cid:12)ed the model. Therefore, we need to relax the rules. In order to resolve current con(cid:13)ict, GR de(cid:12)nes separate rules for regular and strategic customers: { BR7. For regular customers, the new order cannot be accepted if there are unpaid orders in the order history. 12 Simulation-Driven Approach for Business Rules Discovery Fig. 7: Example - New Order Not Created For Strategic Customers Because of Unpaid Past Orders We replace the rules BR4.7 and BR6 with the two new rules. These rules in Alloy are shown in Fig. ??. BR7 claims that if the order is created for the regular customer, all his past orders must be paid. BR8 claims that if the order is created for strategic customer, there can be maximum 2 unpaid orders for that customer. Fig. 8: BR7 - Regular Customers Must Pay Past Orders Before Placing New Order If we check now the assertion in Fig. 4e, we get no counterexamples, showing that the rule is valid again. If we run order creation process we can obtain the instances showing that the strategic customer can order even with unpaid orders in his history (Fig. 9). Option 2: BR1: For regular customers, the con(cid:12)rmed order must be delivered only upon the payment received; BR2: For large accounts, the con(cid:12)rmed order must be delivered; BR3: For large accounts, the con(cid:12)rmed order must be even- tually payed; .... BR1000045: the large accounts must always be able to submit the order. Simulation-Driven Approach for Business Rules Discovery 13 Fig. 9: Strategic Customer Can Make New Order With Unpaid Orders 4 An Interactive Discovery and Validation of Business Rules: ??? In this section, we explain the general process for interactive automated discovery of business rules with Alloy Analyzer. The basic steps of our simulation-driven business rule discovery approach are: 4.1 BR Speci(cid:12)cation in the Natural Language The business analyst speci(cid:12)es the rules in the natural language. These are the initial business rules he elicited from different roles in the company. Very often these set of rules is not covering some implicit rules. The following steps help him detect the new business rules. 4.2 Speci(cid:12)cation in Formal Language The designer translates the business rules in natural language to Alloy declara- tive language. He also specify the whole model in Alloy (including data structure and behavior), so that he can detect how the business rule in(cid:13)uence the com- pany behavior. The business rules in Alloy can be represented as Alloy facts, predicates or assertions depending on the type of the business rule, as explained in Section 3.2. This way, the designer has the power to express different scope of business rules, which can be very useful. 4.3 Simulation and Analysis The designer simulate the model with the initial business rules using Alloy An- alyzer tool. The objective of model simulation is twofold: (cid:12)rst, to check our model for consistency (absence of contradictory constraints in business rules), 14 Simulation-Driven Approach for Business Rules Discovery and second, to test the random set of model instances generated by Alloy An- alyzer for different kind anomalies. If underspeci(cid:12)cation anomaly appears - the \unwanted/unexpected" behavior is identi(cid:12)ed - the analyst should con(cid:12)rm that it is correct to have this instances or detect is as a problem. In the second case an explicit rule need to be speci(cid:12)ed for the cluster of \unwanted/unexpected" instances. 4.4 Adding New BR The business analyst speci(cid:12)es the new business rule in natural language. The designer translates the business rule to Alloy language and simulate again the model. New rule can potentially be in con(cid:13)ict with the existing one, can add unnecessary constraints to the model and overspecify the model. If the business analyst con(cid:12)rm this is the case, the business rules should be adapted. 4.5 Adjusting Model to New BR In case the overspeci(cid:12)cation appears, the rule should be replaced by considering different cases when it should apply. The business analyst gives proposition of the changes of business rules. The designer translates relaxed business rules into Alloy and simulate the model to con(cid:12)rm with business analyst everything is correct now. The steps 4.3, 4.4 and 4.5 are repeated until there is no anomalies detected and business analyst con(cid:12)rms that the system behaves by his expectations. 5 Conclusion We have presented an interactive approach for business rule discovery based on simulations in Alloy Analyzer tool. Business rules are represented as Al- loy facts, predicates or assertions, depending on the type of business rule (ne- cessity/possibility, obligation/restriction; or maybe to put our categories al- lowance/obligation/restriction/possibility - but maybe this is the same :) if the necessity is the same as allowance). This enables to de(cid:12)ne precise scope of busi- ness rule - do they apply to the whole model, just to the given context or they should always be implied from the model. The business analyst de(cid:12)nes the initial business rules in natural language, which the designer translates to Alloy formal language. The designer also speci- (cid:12)es the model of the company. The model with the initial business rules in then simulated using the Alloy Analyzer tool. During the simulation, the designer checks if the business rules are consistent and checks together with business an- alyst if some anomalies appear in the behavior. In case they appear, business analyst suggest new rules in natural language, which the designer translates to the formal language. Finally, the model should be adjusted to the new rule, since the inconsistencies could appear between the existing and the new business rule. Simulation-Driven Approach for Business Rules Discovery 15 This way, the business analyst can interactively analyze the existing business rules and discover the new and implicit business rules. The next step in our approach is to make the language for business rules speci(cid:12)cation closer to the business analyst. One way to this is to use Attempto Controlled English (ACE), a controlled natural language, i.e. a rich subset of standard English designed to serve as knowledge representation language. in this way, we could allow the analyst to express texts precisely, and in the terms of their respective application domain and perhaps to avoid having the designer as an intermediate step of business rule discovery.